<?php
/**
 * This file is part of the {@link http://ontowiki.net OntoWiki} project.
 *
 * @copyright Copyright (c) 2011, {@link http://aksw.org AKSW}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 * @package Extensions
 */

/**
 * The superclass-file providing the chart class skeleton for this class file
 */
require_once 'Chart.php';


/**
 * Table chart model class for the ChartView component. This class adapts the
 * parameters of the default chart model to the table chart. Moreover, a special
 * procedure for generating the internal data model with n dimensions and m measures
 * is implemented.
 *
 * @copyright Copyright (c) 2011, {@link http://aksw.org AKSW}
 * @license http://opensource.org/licenses/gpl-license.php GNU General Public License (GPL)
 * @category OntoWiki
 * @package Extensions
 * @subpackage Cubeviz
 * @author Tom-Michael Hesse <tommichael.hesse@googlemail.com>
 */
class TableChart extends Chart{
    
    /**
     * Holds the type of the chart represented as a name string
     * @var string The type of the chart as string
     * @see Chart::$_type 
     */
    protected static $_type = 'table';
    
    /**
     * Holds the limits as numbers of dimensions and measures of the chart for 
     * which the chart model can be applied
     * @var array The limits of the chart: 'minDimension' => int, 
     * 'maxDimension' => int, 'minMeasure' => int, 'maxMeasure' => int
     * @see Chart::$_limits
     */
    protected static $_limits = array('minDimension' => 1, 'maxDimension' => 99,
        'minMeasure' => 1, 'maxMeasure' => 99);
    
    /**
     * Initializes the chart model with all needed data for generating the series
     * and meta information.
     * @param array $dimensionData The dimension data to be used in the chart;
     * generated by the cube helper
     * @param array $measureData The measure data to be used in the chart;
     * generated by the cube helper
     * @param array $nameTable The name table for the qualified names of the
     * dimensions and measures; generated by the cube helper
     * @param array $dimensions The dimensions with their axis allocation to be used
     * in the chart
     * @param array $measures The measures to be used in the chart
     * @param array $titles The titles array
     * @param Erfurt_Rdf_Model $model The model from which the labels can be aquired
     * @see Chart::__construct()
     */
    public function __construct($dimensionData, $measureData, $nameTable, $dimensions, $measures,
            $titles, $model) {
        
        //generic test for the appropriate numbers of dimensions and measures
        //here only the minimum limits have importance
        if(count($nameTable['d']) >= static::$_limits['minDimension'] 
                && count($nameTable['m']) >= static::$_limits['minMeasure']) {
            
            $dimensionDataFinal = array();
            $measureDataFinal = array();
            $titleHelper = new OntoWiki_Model_TitleHelper($model);
            
            $dimensionElem = array();
            $dimensionElemCount = array();
            $dimensionElemNames = array();
            
            //get all dimension elements and set them in the title helper and
            //the dimension table
            foreach($dimensionData as $index => $dimensionTuple) {
                foreach(array_keys($dimensions) as $dimension) {
                    $titleHelper->addResource($dimensionTuple[$nameTable['d']
                            [$dimension]['qname']]);
                    $dimensionElem[$dimension][$dimensionTuple[$nameTable['d']
                            [$dimension]['qname']]] = true;
                    $dimensionDataFinal[$index][$dimensionTuple[$nameTable['d']
                            [$dimension]['qname']]] = true;
                }
            }
            
            //set all names for the dimension elements
            foreach($dimensionData as $index => $dimensionTuple) {
                foreach(array_keys($dimensions) as $dimension) {
                    $dimensionElemNames[$dimensionTuple[$nameTable['d']
                        [$dimension]['qname']]] = $titleHelper->
                            getTitle($dimensionTuple[$nameTable['d'][$dimension]['qname']]);
                }
            }
            
            //calculate all counts so that the table can be structured
            foreach(array_keys($dimensions) as $dimension) {
                $dimensionElemCount[$dimension] = count($dimensionElem[$dimension]);
            }
            
            //set all measure data for the table
            foreach($measureData as $index => $measureTuple) {
                foreach($measures as $measure) {
                    $measureDataFinal[$index][$nameTable['m'][$measure]['label']] 
                        = $measureData[$index][$nameTable['m'][$measure]['qname']];
                }
            }
            
            //set all data to the chart model
            $this->_data = array('dimensionData' => $dimensionDataFinal, 
                'measureData' => $measureDataFinal, 
                'dimensionElem' => $dimensionElem,
                'dimensionElemCount' => $dimensionElemCount,
                'dimensionElemNames' => $dimensionElemNames);
          
            $this->_xAxis = array_keys($dimensions);
            
            $this->_yAxis = $measures;
            
            $this->_zAxis = $nameTable;
            
            $this->_titles = $titles;
            
            
        }
    }
}

?>
